Authors of this paper proposed a non-deformation based method by generating tool paths inside the solid volume for multi-axis 3D printing. The methods consists of 4 major steps: 1) the best choice of tool orientations are first assigned on a set of points inside the given solid; 2) the tangent orientations of the tool paths are computed on the set of points; 3) to optimise the positions of the points equipped with normals orientations and tangent directions; and 4) lastly a greedy local tracing algorithm is applied to connect the points to form the final tool paths for multi-axis printing, where the tracing step can help apply manufacturing constraints such as tool orientations and collision-free check etc. The results generated by this algorithm have been compared with the earlier research approaches such as CurviSlicer and S^3-slicer. 

Although this is an interesting paper that proposed a different way to generate the tool paths for multi-axis 3D printing, I have some concerns about the current manuscript - especially about the inaccurate claims and discussions of the state-of-the-art and the unfair comparisons. Details are explained below.

First of all, the steps of atom computation / optimization are decoupled into 3 steps. Why you cannot computing all these together? Which may give you more optimal solutions? I guess this is caused by the highly non-linear form according to the complexity of the problem. The steps are actually similar to the method to determine the vector field in the work of [FZZ*20], which is recently extended to a 2-RoSy rep in their work for continuous fibre fabrication. I believe the similarity of this step is worthy to be discussed. 

Moreover, the discussion / argument for the problem of deformation based approaches shown in Figure.2 may not be correct when the orientation step of the model is allowed to be optimized together (e.g, as the optimization conducted in the recent work of Neural Slicer where the rotation field and the scaling fields are computed -- this actually defines local frames similar to the atoms in this paper).

The major limitations of the proposed approach are the local algorithm choices - especially the local greedy search to connect the atoms to form the tool paths, which can drive the search into local optimum so that the collision-free and support-free constraints cannot be satisfied? The potential problems of all these local strategy choices need to be carefully discussed (including the decoupling of the atom optimization).

Lastly, the comparison with the earlier approach such as S^3-slicer is unfair. Basically, S^3-slicer has a post-processing step of adaptive slicing and elimination to generate partial layers so that the problems highlighted in this paper can be solved. Apparently, the comparison given in Fig.13-15 & 18 neglect this step. Furthermore I would like to see if this approach can be applied to those models with high genus number -- e.g., the Spiral-Fish model of the Neural Slicer approach [LZC*24] as the high genus will lead to several separated regions, where the greedy search will have more chance to drive to local problems. 

In summary, I would like to see the above issues be well addressed in a revision. 